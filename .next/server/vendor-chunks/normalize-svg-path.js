"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/normalize-svg-path";
exports.ids = ["vendor-chunks/normalize-svg-path"];
exports.modules = {

/***/ "(ssr)/./node_modules/normalize-svg-path/index.js":
/*!**************************************************!*\
  !*** ./node_modules/normalize-svg-path/index.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\r\n\r\nmodule.exports = normalize\r\n\r\nvar arcToCurve = __webpack_require__(/*! svg-arc-to-cubic-bezier */ \"(ssr)/./node_modules/svg-arc-to-cubic-bezier/cjs/index.js\")\r\n\r\nfunction normalize(path){\r\n  // init state\r\n  var prev\r\n  var result = []\r\n  var bezierX = 0\r\n  var bezierY = 0\r\n  var startX = 0\r\n  var startY = 0\r\n  var quadX = null\r\n  var quadY = null\r\n  var x = 0\r\n  var y = 0\r\n\r\n  for (var i = 0, len = path.length; i < len; i++) {\r\n    var seg = path[i]\r\n    var command = seg[0]\r\n\r\n    switch (command) {\r\n      case 'M':\r\n        startX = seg[1]\r\n        startY = seg[2]\r\n        break\r\n      case 'A':\r\n        var curves = arcToCurve({\r\n          px: x,\r\n          py: y,\r\n          cx: seg[6],\r\n          cy:  seg[7],\r\n          rx: seg[1],\r\n          ry: seg[2],\r\n          xAxisRotation: seg[3],\r\n          largeArcFlag: seg[4],\r\n          sweepFlag: seg[5]\r\n        })\r\n\r\n        // null-curves\r\n        if (!curves.length) continue\r\n\r\n        for (var j = 0, c; j < curves.length; j++) {\r\n          c = curves[j]\r\n          seg = ['C', c.x1, c.y1, c.x2, c.y2, c.x, c.y]\r\n          if (j < curves.length - 1) result.push(seg)\r\n        }\r\n\r\n        break\r\n      case 'S':\r\n        // default control point\r\n        var cx = x\r\n        var cy = y\r\n        if (prev == 'C' || prev == 'S') {\r\n          cx += cx - bezierX // reflect the previous command's control\r\n          cy += cy - bezierY // point relative to the current point\r\n        }\r\n        seg = ['C', cx, cy, seg[1], seg[2], seg[3], seg[4]]\r\n        break\r\n      case 'T':\r\n        if (prev == 'Q' || prev == 'T') {\r\n          quadX = x * 2 - quadX // as with 'S' reflect previous control point\r\n          quadY = y * 2 - quadY\r\n        } else {\r\n          quadX = x\r\n          quadY = y\r\n        }\r\n        seg = quadratic(x, y, quadX, quadY, seg[1], seg[2])\r\n        break\r\n      case 'Q':\r\n        quadX = seg[1]\r\n        quadY = seg[2]\r\n        seg = quadratic(x, y, seg[1], seg[2], seg[3], seg[4])\r\n        break\r\n      case 'L':\r\n        seg = line(x, y, seg[1], seg[2])\r\n        break\r\n      case 'H':\r\n        seg = line(x, y, seg[1], y)\r\n        break\r\n      case 'V':\r\n        seg = line(x, y, x, seg[1])\r\n        break\r\n      case 'Z':\r\n        seg = line(x, y, startX, startY)\r\n        break\r\n    }\r\n\r\n    // update state\r\n    prev = command\r\n    x = seg[seg.length - 2]\r\n    y = seg[seg.length - 1]\r\n    if (seg.length > 4) {\r\n      bezierX = seg[seg.length - 4]\r\n      bezierY = seg[seg.length - 3]\r\n    } else {\r\n      bezierX = x\r\n      bezierY = y\r\n    }\r\n    result.push(seg)\r\n  }\r\n\r\n  return result\r\n}\r\n\r\nfunction line(x1, y1, x2, y2){\r\n  return ['C', x1, y1, x2, y2, x2, y2]\r\n}\r\n\r\nfunction quadratic(x1, y1, cx, cy, x2, y2){\r\n  return [\r\n    'C',\r\n    x1/3 + (2/3) * cx,\r\n    y1/3 + (2/3) * cy,\r\n    x2/3 + (2/3) * cx,\r\n    y2/3 + (2/3) * cy,\r\n    x2,\r\n    y2\r\n  ]\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbm9ybWFsaXplLXN2Zy1wYXRoL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLG1CQUFPLENBQUMsMEZBQXlCO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQ0FBcUMsU0FBUztBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQixtQkFBbUI7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vcGVuLXJlc3VtZS8uL25vZGVfbW9kdWxlcy9ub3JtYWxpemUtc3ZnLXBhdGgvaW5kZXguanM/ZTE0YiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gbm9ybWFsaXplXHJcblxyXG52YXIgYXJjVG9DdXJ2ZSA9IHJlcXVpcmUoJ3N2Zy1hcmMtdG8tY3ViaWMtYmV6aWVyJylcclxuXHJcbmZ1bmN0aW9uIG5vcm1hbGl6ZShwYXRoKXtcclxuICAvLyBpbml0IHN0YXRlXHJcbiAgdmFyIHByZXZcclxuICB2YXIgcmVzdWx0ID0gW11cclxuICB2YXIgYmV6aWVyWCA9IDBcclxuICB2YXIgYmV6aWVyWSA9IDBcclxuICB2YXIgc3RhcnRYID0gMFxyXG4gIHZhciBzdGFydFkgPSAwXHJcbiAgdmFyIHF1YWRYID0gbnVsbFxyXG4gIHZhciBxdWFkWSA9IG51bGxcclxuICB2YXIgeCA9IDBcclxuICB2YXIgeSA9IDBcclxuXHJcbiAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHBhdGgubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcclxuICAgIHZhciBzZWcgPSBwYXRoW2ldXHJcbiAgICB2YXIgY29tbWFuZCA9IHNlZ1swXVxyXG5cclxuICAgIHN3aXRjaCAoY29tbWFuZCkge1xyXG4gICAgICBjYXNlICdNJzpcclxuICAgICAgICBzdGFydFggPSBzZWdbMV1cclxuICAgICAgICBzdGFydFkgPSBzZWdbMl1cclxuICAgICAgICBicmVha1xyXG4gICAgICBjYXNlICdBJzpcclxuICAgICAgICB2YXIgY3VydmVzID0gYXJjVG9DdXJ2ZSh7XHJcbiAgICAgICAgICBweDogeCxcclxuICAgICAgICAgIHB5OiB5LFxyXG4gICAgICAgICAgY3g6IHNlZ1s2XSxcclxuICAgICAgICAgIGN5OiAgc2VnWzddLFxyXG4gICAgICAgICAgcng6IHNlZ1sxXSxcclxuICAgICAgICAgIHJ5OiBzZWdbMl0sXHJcbiAgICAgICAgICB4QXhpc1JvdGF0aW9uOiBzZWdbM10sXHJcbiAgICAgICAgICBsYXJnZUFyY0ZsYWc6IHNlZ1s0XSxcclxuICAgICAgICAgIHN3ZWVwRmxhZzogc2VnWzVdXHJcbiAgICAgICAgfSlcclxuXHJcbiAgICAgICAgLy8gbnVsbC1jdXJ2ZXNcclxuICAgICAgICBpZiAoIWN1cnZlcy5sZW5ndGgpIGNvbnRpbnVlXHJcblxyXG4gICAgICAgIGZvciAodmFyIGogPSAwLCBjOyBqIDwgY3VydmVzLmxlbmd0aDsgaisrKSB7XHJcbiAgICAgICAgICBjID0gY3VydmVzW2pdXHJcbiAgICAgICAgICBzZWcgPSBbJ0MnLCBjLngxLCBjLnkxLCBjLngyLCBjLnkyLCBjLngsIGMueV1cclxuICAgICAgICAgIGlmIChqIDwgY3VydmVzLmxlbmd0aCAtIDEpIHJlc3VsdC5wdXNoKHNlZylcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGJyZWFrXHJcbiAgICAgIGNhc2UgJ1MnOlxyXG4gICAgICAgIC8vIGRlZmF1bHQgY29udHJvbCBwb2ludFxyXG4gICAgICAgIHZhciBjeCA9IHhcclxuICAgICAgICB2YXIgY3kgPSB5XHJcbiAgICAgICAgaWYgKHByZXYgPT0gJ0MnIHx8IHByZXYgPT0gJ1MnKSB7XHJcbiAgICAgICAgICBjeCArPSBjeCAtIGJlemllclggLy8gcmVmbGVjdCB0aGUgcHJldmlvdXMgY29tbWFuZCdzIGNvbnRyb2xcclxuICAgICAgICAgIGN5ICs9IGN5IC0gYmV6aWVyWSAvLyBwb2ludCByZWxhdGl2ZSB0byB0aGUgY3VycmVudCBwb2ludFxyXG4gICAgICAgIH1cclxuICAgICAgICBzZWcgPSBbJ0MnLCBjeCwgY3ksIHNlZ1sxXSwgc2VnWzJdLCBzZWdbM10sIHNlZ1s0XV1cclxuICAgICAgICBicmVha1xyXG4gICAgICBjYXNlICdUJzpcclxuICAgICAgICBpZiAocHJldiA9PSAnUScgfHwgcHJldiA9PSAnVCcpIHtcclxuICAgICAgICAgIHF1YWRYID0geCAqIDIgLSBxdWFkWCAvLyBhcyB3aXRoICdTJyByZWZsZWN0IHByZXZpb3VzIGNvbnRyb2wgcG9pbnRcclxuICAgICAgICAgIHF1YWRZID0geSAqIDIgLSBxdWFkWVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBxdWFkWCA9IHhcclxuICAgICAgICAgIHF1YWRZID0geVxyXG4gICAgICAgIH1cclxuICAgICAgICBzZWcgPSBxdWFkcmF0aWMoeCwgeSwgcXVhZFgsIHF1YWRZLCBzZWdbMV0sIHNlZ1syXSlcclxuICAgICAgICBicmVha1xyXG4gICAgICBjYXNlICdRJzpcclxuICAgICAgICBxdWFkWCA9IHNlZ1sxXVxyXG4gICAgICAgIHF1YWRZID0gc2VnWzJdXHJcbiAgICAgICAgc2VnID0gcXVhZHJhdGljKHgsIHksIHNlZ1sxXSwgc2VnWzJdLCBzZWdbM10sIHNlZ1s0XSlcclxuICAgICAgICBicmVha1xyXG4gICAgICBjYXNlICdMJzpcclxuICAgICAgICBzZWcgPSBsaW5lKHgsIHksIHNlZ1sxXSwgc2VnWzJdKVxyXG4gICAgICAgIGJyZWFrXHJcbiAgICAgIGNhc2UgJ0gnOlxyXG4gICAgICAgIHNlZyA9IGxpbmUoeCwgeSwgc2VnWzFdLCB5KVxyXG4gICAgICAgIGJyZWFrXHJcbiAgICAgIGNhc2UgJ1YnOlxyXG4gICAgICAgIHNlZyA9IGxpbmUoeCwgeSwgeCwgc2VnWzFdKVxyXG4gICAgICAgIGJyZWFrXHJcbiAgICAgIGNhc2UgJ1onOlxyXG4gICAgICAgIHNlZyA9IGxpbmUoeCwgeSwgc3RhcnRYLCBzdGFydFkpXHJcbiAgICAgICAgYnJlYWtcclxuICAgIH1cclxuXHJcbiAgICAvLyB1cGRhdGUgc3RhdGVcclxuICAgIHByZXYgPSBjb21tYW5kXHJcbiAgICB4ID0gc2VnW3NlZy5sZW5ndGggLSAyXVxyXG4gICAgeSA9IHNlZ1tzZWcubGVuZ3RoIC0gMV1cclxuICAgIGlmIChzZWcubGVuZ3RoID4gNCkge1xyXG4gICAgICBiZXppZXJYID0gc2VnW3NlZy5sZW5ndGggLSA0XVxyXG4gICAgICBiZXppZXJZID0gc2VnW3NlZy5sZW5ndGggLSAzXVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgYmV6aWVyWCA9IHhcclxuICAgICAgYmV6aWVyWSA9IHlcclxuICAgIH1cclxuICAgIHJlc3VsdC5wdXNoKHNlZylcclxuICB9XHJcblxyXG4gIHJldHVybiByZXN1bHRcclxufVxyXG5cclxuZnVuY3Rpb24gbGluZSh4MSwgeTEsIHgyLCB5Mil7XHJcbiAgcmV0dXJuIFsnQycsIHgxLCB5MSwgeDIsIHkyLCB4MiwgeTJdXHJcbn1cclxuXHJcbmZ1bmN0aW9uIHF1YWRyYXRpYyh4MSwgeTEsIGN4LCBjeSwgeDIsIHkyKXtcclxuICByZXR1cm4gW1xyXG4gICAgJ0MnLFxyXG4gICAgeDEvMyArICgyLzMpICogY3gsXHJcbiAgICB5MS8zICsgKDIvMykgKiBjeSxcclxuICAgIHgyLzMgKyAoMi8zKSAqIGN4LFxyXG4gICAgeTIvMyArICgyLzMpICogY3ksXHJcbiAgICB4MixcclxuICAgIHkyXHJcbiAgXVxyXG59XHJcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/normalize-svg-path/index.js\n");

/***/ })

};
;