/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/restructure";
exports.ids = ["vendor-chunks/restructure"];
exports.modules = {

/***/ "(ssr)/./node_modules/restructure/dist/main.cjs":
/*!************************************************!*\
  !*** ./node_modules/restructure/dist/main.cjs ***!
  \************************************************/
/***/ ((module) => {

eval("function $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\nfunction $parcel$exportWildcard(dest, source) {\n  Object.keys(source).forEach(function(key) {\n    if (key === 'default' || key === '__esModule' || dest.hasOwnProperty(key)) {\n      return;\n    }\n\n    Object.defineProperty(dest, key, {\n      enumerable: true,\n      get: function get() {\n        return source[key];\n      }\n    });\n  });\n\n  return dest;\n}\n\n$parcel$export(module.exports, \"EncodeStream\", () => $1ed46182c1410e1d$export$9b4f661deaa36c3e);\n$parcel$export(module.exports, \"DecodeStream\", () => $8ae20583b93e4933$export$c18b354bac7948e9);\n$parcel$export(module.exports, \"Array\", () => $8ea28a08eae2a116$export$c4be6576ca6fe4aa);\n$parcel$export(module.exports, \"LazyArray\", () => $444f112d3cbc7e9f$export$5576c026028d4983);\n$parcel$export(module.exports, \"Bitfield\", () => $3def237a34a226b5$export$96b43b8a49f688ea);\n$parcel$export(module.exports, \"Boolean\", () => $8415e91bb83faf74$export$ff887cefee4d61ec);\n$parcel$export(module.exports, \"Buffer\", () => $08d28604119af47e$export$7d22a0eea6656474);\n$parcel$export(module.exports, \"Enum\", () => $070ce31ea947467f$export$deb82508dd66d288);\n$parcel$export(module.exports, \"Optional\", () => $80703542fcfb6ff0$export$7acb7b24c478f9c6);\n$parcel$export(module.exports, \"Reserved\", () => $f4fd49878232508a$export$da9b5fe187a9aa1);\n$parcel$export(module.exports, \"String\", () => $d8705cd4022e7dcf$export$89b8e0fa65f6a914);\n$parcel$export(module.exports, \"Struct\", () => $aa8b66bae6abe658$export$eabc71f011df675a);\n$parcel$export(module.exports, \"VersionedStruct\", () => $fcb208a95f6d048b$export$95a8b60f4da7dec8);\n// Node back-compat.\nconst $8ae20583b93e4933$var$ENCODING_MAPPING = {\n    utf16le: \"utf-16le\",\n    ucs2: \"utf-16le\",\n    utf16be: \"utf-16be\"\n};\nclass $8ae20583b93e4933$export$c18b354bac7948e9 {\n    constructor(buffer){\n        this.buffer = buffer;\n        this.view = new DataView(buffer.buffer, buffer.byteOffset, buffer.byteLength);\n        this.pos = 0;\n        this.length = this.buffer.length;\n    }\n    readString(length, encoding = \"ascii\") {\n        encoding = $8ae20583b93e4933$var$ENCODING_MAPPING[encoding] || encoding;\n        let buf = this.readBuffer(length);\n        try {\n            let decoder = new TextDecoder(encoding);\n            return decoder.decode(buf);\n        } catch (err) {\n            return buf;\n        }\n    }\n    readBuffer(length) {\n        return this.buffer.slice(this.pos, this.pos += length);\n    }\n    readUInt24BE() {\n        return (this.readUInt16BE() << 8) + this.readUInt8();\n    }\n    readUInt24LE() {\n        return this.readUInt16LE() + (this.readUInt8() << 16);\n    }\n    readInt24BE() {\n        return (this.readInt16BE() << 8) + this.readUInt8();\n    }\n    readInt24LE() {\n        return this.readUInt16LE() + (this.readInt8() << 16);\n    }\n}\n$8ae20583b93e4933$export$c18b354bac7948e9.TYPES = {\n    UInt8: 1,\n    UInt16: 2,\n    UInt24: 3,\n    UInt32: 4,\n    Int8: 1,\n    Int16: 2,\n    Int24: 3,\n    Int32: 4,\n    Float: 4,\n    Double: 8\n};\nfor (let key of Object.getOwnPropertyNames(DataView.prototype))if (key.slice(0, 3) === \"get\") {\n    let type = key.slice(3).replace(\"Ui\", \"UI\");\n    if (type === \"Float32\") type = \"Float\";\n    else if (type === \"Float64\") type = \"Double\";\n    let bytes = $8ae20583b93e4933$export$c18b354bac7948e9.TYPES[type];\n    $8ae20583b93e4933$export$c18b354bac7948e9.prototype[\"read\" + type + (bytes === 1 ? \"\" : \"BE\")] = function() {\n        const ret = this.view[key](this.pos, false);\n        this.pos += bytes;\n        return ret;\n    };\n    if (bytes !== 1) $8ae20583b93e4933$export$c18b354bac7948e9.prototype[\"read\" + type + \"LE\"] = function() {\n        const ret = this.view[key](this.pos, true);\n        this.pos += bytes;\n        return ret;\n    };\n}\n\n\nconst $1ed46182c1410e1d$var$textEncoder = new TextEncoder();\nconst $1ed46182c1410e1d$var$isBigEndian = new Uint8Array(new Uint16Array([\n    0x1234\n]).buffer)[0] == 0x12;\nclass $1ed46182c1410e1d$export$9b4f661deaa36c3e {\n    constructor(buffer){\n        this.buffer = buffer;\n        this.view = new DataView(this.buffer.buffer, this.buffer.byteOffset, this.buffer.byteLength);\n        this.pos = 0;\n    }\n    writeBuffer(buffer) {\n        this.buffer.set(buffer, this.pos);\n        this.pos += buffer.length;\n    }\n    writeString(string, encoding = \"ascii\") {\n        let buf;\n        switch(encoding){\n            case \"utf16le\":\n            case \"utf16-le\":\n            case \"ucs2\":\n                buf = $1ed46182c1410e1d$var$stringToUtf16(string, $1ed46182c1410e1d$var$isBigEndian);\n                break;\n            case \"utf16be\":\n            case \"utf16-be\":\n                buf = $1ed46182c1410e1d$var$stringToUtf16(string, !$1ed46182c1410e1d$var$isBigEndian);\n                break;\n            case \"utf8\":\n                buf = $1ed46182c1410e1d$var$textEncoder.encode(string);\n                break;\n            case \"ascii\":\n                buf = $1ed46182c1410e1d$var$stringToAscii(string);\n                break;\n            default:\n                throw new Error(`Unsupported encoding: ${encoding}`);\n        }\n        this.writeBuffer(buf);\n    }\n    writeUInt24BE(val) {\n        this.buffer[this.pos++] = val >>> 16 & 0xff;\n        this.buffer[this.pos++] = val >>> 8 & 0xff;\n        this.buffer[this.pos++] = val & 0xff;\n    }\n    writeUInt24LE(val) {\n        this.buffer[this.pos++] = val & 0xff;\n        this.buffer[this.pos++] = val >>> 8 & 0xff;\n        this.buffer[this.pos++] = val >>> 16 & 0xff;\n    }\n    writeInt24BE(val) {\n        if (val >= 0) this.writeUInt24BE(val);\n        else this.writeUInt24BE(val + 0xffffff + 1);\n    }\n    writeInt24LE(val) {\n        if (val >= 0) this.writeUInt24LE(val);\n        else this.writeUInt24LE(val + 0xffffff + 1);\n    }\n    fill(val, length) {\n        if (length < this.buffer.length) {\n            this.buffer.fill(val, this.pos, this.pos + length);\n            this.pos += length;\n        } else {\n            const buf = new Uint8Array(length);\n            buf.fill(val);\n            this.writeBuffer(buf);\n        }\n    }\n}\nfunction $1ed46182c1410e1d$var$stringToUtf16(string, swap) {\n    let buf = new Uint16Array(string.length);\n    for(let i = 0; i < string.length; i++){\n        let code = string.charCodeAt(i);\n        if (swap) code = code >> 8 | (code & 0xff) << 8;\n        buf[i] = code;\n    }\n    return new Uint8Array(buf.buffer);\n}\nfunction $1ed46182c1410e1d$var$stringToAscii(string) {\n    let buf = new Uint8Array(string.length);\n    for(let i = 0; i < string.length; i++)// Match node.js behavior - encoding allows 8-bit rather than 7-bit.\n    buf[i] = string.charCodeAt(i);\n    return buf;\n}\nfor (let key of Object.getOwnPropertyNames(DataView.prototype))if (key.slice(0, 3) === \"set\") {\n    let type = key.slice(3).replace(\"Ui\", \"UI\");\n    if (type === \"Float32\") type = \"Float\";\n    else if (type === \"Float64\") type = \"Double\";\n    let bytes = (0, $8ae20583b93e4933$export$c18b354bac7948e9).TYPES[type];\n    $1ed46182c1410e1d$export$9b4f661deaa36c3e.prototype[\"write\" + type + (bytes === 1 ? \"\" : \"BE\")] = function(value) {\n        this.view[key](this.pos, value, false);\n        this.pos += bytes;\n    };\n    if (bytes !== 1) $1ed46182c1410e1d$export$9b4f661deaa36c3e.prototype[\"write\" + type + \"LE\"] = function(value) {\n        this.view[key](this.pos, value, true);\n        this.pos += bytes;\n    };\n}\n\n\n\n\n\nclass $8d21f7fa58802901$export$ef88aa0d34c34520 {\n    fromBuffer(buffer) {\n        let stream = new (0, $8ae20583b93e4933$export$c18b354bac7948e9)(buffer);\n        return this.decode(stream);\n    }\n    toBuffer(value) {\n        let size = this.size(value);\n        let buffer = new Uint8Array(size);\n        let stream = new (0, $1ed46182c1410e1d$export$9b4f661deaa36c3e)(buffer);\n        this.encode(stream, value);\n        return buffer;\n    }\n}\n\n\nvar $af65abf7bf65ac42$exports = {};\n\n$parcel$export($af65abf7bf65ac42$exports, \"Number\", () => $af65abf7bf65ac42$export$fffa67e515d04022);\n$parcel$export($af65abf7bf65ac42$exports, \"uint8\", () => $af65abf7bf65ac42$export$52e103c63c4e68cf);\n$parcel$export($af65abf7bf65ac42$exports, \"uint16be\", () => $af65abf7bf65ac42$export$60dfe43c8297a8f8);\n$parcel$export($af65abf7bf65ac42$exports, \"uint16\", () => $af65abf7bf65ac42$export$56bd24b5a3ee8456);\n$parcel$export($af65abf7bf65ac42$exports, \"uint16le\", () => $af65abf7bf65ac42$export$b92d76f0ca6d1789);\n$parcel$export($af65abf7bf65ac42$exports, \"uint24be\", () => $af65abf7bf65ac42$export$255f45171f96b50c);\n$parcel$export($af65abf7bf65ac42$exports, \"uint24\", () => $af65abf7bf65ac42$export$1925298fbd719b21);\n$parcel$export($af65abf7bf65ac42$exports, \"uint24le\", () => $af65abf7bf65ac42$export$758e1dafc8dc7271);\n$parcel$export($af65abf7bf65ac42$exports, \"uint32be\", () => $af65abf7bf65ac42$export$74c16dba6c885532);\n$parcel$export($af65abf7bf65ac42$exports, \"uint32\", () => $af65abf7bf65ac42$export$de9ffb9418dd7d0d);\n$parcel$export($af65abf7bf65ac42$exports, \"uint32le\", () => $af65abf7bf65ac42$export$5f744bb30a534bc9);\n$parcel$export($af65abf7bf65ac42$exports, \"int8\", () => $af65abf7bf65ac42$export$5984f25eab09961f);\n$parcel$export($af65abf7bf65ac42$exports, \"int16be\", () => $af65abf7bf65ac42$export$198ae7d10d26a900);\n$parcel$export($af65abf7bf65ac42$exports, \"int16\", () => $af65abf7bf65ac42$export$c35c15c7caeff2b6);\n$parcel$export($af65abf7bf65ac42$exports, \"int16le\", () => $af65abf7bf65ac42$export$399cc4b7169e5aed);\n$parcel$export($af65abf7bf65ac42$exports, \"int24be\", () => $af65abf7bf65ac42$export$3676d1f71eca2ec0);\n$parcel$export($af65abf7bf65ac42$exports, \"int24\", () => $af65abf7bf65ac42$export$73f695d681ac61f9);\n$parcel$export($af65abf7bf65ac42$exports, \"int24le\", () => $af65abf7bf65ac42$export$671f8672dbd40a4);\n$parcel$export($af65abf7bf65ac42$exports, \"int32be\", () => $af65abf7bf65ac42$export$78a2ac3d09dd42d5);\n$parcel$export($af65abf7bf65ac42$exports, \"int32\", () => $af65abf7bf65ac42$export$1d95835383bb05a);\n$parcel$export($af65abf7bf65ac42$exports, \"int32le\", () => $af65abf7bf65ac42$export$5ec1f146e759329a);\n$parcel$export($af65abf7bf65ac42$exports, \"floatbe\", () => $af65abf7bf65ac42$export$92b5c14c6abb5c97);\n$parcel$export($af65abf7bf65ac42$exports, \"float\", () => $af65abf7bf65ac42$export$6b5cd3983e3ee5ab);\n$parcel$export($af65abf7bf65ac42$exports, \"floatle\", () => $af65abf7bf65ac42$export$6d20592bc4cb19d9);\n$parcel$export($af65abf7bf65ac42$exports, \"doublebe\", () => $af65abf7bf65ac42$export$e50b9e97e4d43631);\n$parcel$export($af65abf7bf65ac42$exports, \"double\", () => $af65abf7bf65ac42$export$7b3cbda67be88f5f);\n$parcel$export($af65abf7bf65ac42$exports, \"doublele\", () => $af65abf7bf65ac42$export$6f53315aa512b751);\n$parcel$export($af65abf7bf65ac42$exports, \"Fixed\", () => $af65abf7bf65ac42$export$13475bbd2a37a9b4);\n$parcel$export($af65abf7bf65ac42$exports, \"fixed16be\", () => $af65abf7bf65ac42$export$f87b441e6bd90278);\n$parcel$export($af65abf7bf65ac42$exports, \"fixed16\", () => $af65abf7bf65ac42$export$a3abada75ef55921);\n$parcel$export($af65abf7bf65ac42$exports, \"fixed16le\", () => $af65abf7bf65ac42$export$3752a2886837dc22);\n$parcel$export($af65abf7bf65ac42$exports, \"fixed32be\", () => $af65abf7bf65ac42$export$dd71d8d9bc792632);\n$parcel$export($af65abf7bf65ac42$exports, \"fixed32\", () => $af65abf7bf65ac42$export$e913265d48471f2d);\n$parcel$export($af65abf7bf65ac42$exports, \"fixed32le\", () => $af65abf7bf65ac42$export$7fc47db6a5fc8223);\n\n\nclass $af65abf7bf65ac42$export$fffa67e515d04022 extends (0, $8d21f7fa58802901$export$ef88aa0d34c34520) {\n    constructor(type, endian = \"BE\"){\n        super();\n        this.type = type;\n        this.endian = endian;\n        this.fn = this.type;\n        if (this.type[this.type.length - 1] !== \"8\") this.fn += this.endian;\n    }\n    size() {\n        return (0, $8ae20583b93e4933$export$c18b354bac7948e9).TYPES[this.type];\n    }\n    decode(stream) {\n        return stream[`read${this.fn}`]();\n    }\n    encode(stream, val) {\n        return stream[`write${this.fn}`](val);\n    }\n}\nconst $af65abf7bf65ac42$export$52e103c63c4e68cf = new $af65abf7bf65ac42$export$fffa67e515d04022(\"UInt8\");\nconst $af65abf7bf65ac42$export$60dfe43c8297a8f8 = new $af65abf7bf65ac42$export$fffa67e515d04022(\"UInt16\", \"BE\");\nconst $af65abf7bf65ac42$export$56bd24b5a3ee8456 = $af65abf7bf65ac42$export$60dfe43c8297a8f8;\nconst $af65abf7bf65ac42$export$b92d76f0ca6d1789 = new $af65abf7bf65ac42$export$fffa67e515d04022(\"UInt16\", \"LE\");\nconst $af65abf7bf65ac42$export$255f45171f96b50c = new $af65abf7bf65ac42$export$fffa67e515d04022(\"UInt24\", \"BE\");\nconst $af65abf7bf65ac42$export$1925298fbd719b21 = $af65abf7bf65ac42$export$255f45171f96b50c;\nconst $af65abf7bf65ac42$export$758e1dafc8dc7271 = new $af65abf7bf65ac42$export$fffa67e515d04022(\"UInt24\", \"LE\");\nconst $af65abf7bf65ac42$export$74c16dba6c885532 = new $af65abf7bf65ac42$export$fffa67e515d04022(\"UInt32\", \"BE\");\nconst $af65abf7bf65ac42$export$de9ffb9418dd7d0d = $af65abf7bf65ac42$export$74c16dba6c885532;\nconst $af65abf7bf65ac42$export$5f744bb30a534bc9 = new $af65abf7bf65ac42$export$fffa67e515d04022(\"UInt32\", \"LE\");\nconst $af65abf7bf65ac42$export$5984f25eab09961f = new $af65abf7bf65ac42$export$fffa67e515d04022(\"Int8\");\nconst $af65abf7bf65ac42$export$198ae7d10d26a900 = new $af65abf7bf65ac42$export$fffa67e515d04022(\"Int16\", \"BE\");\nconst $af65abf7bf65ac42$export$c35c15c7caeff2b6 = $af65abf7bf65ac42$export$198ae7d10d26a900;\nconst $af65abf7bf65ac42$export$399cc4b7169e5aed = new $af65abf7bf65ac42$export$fffa67e515d04022(\"Int16\", \"LE\");\nconst $af65abf7bf65ac42$export$3676d1f71eca2ec0 = new $af65abf7bf65ac42$export$fffa67e515d04022(\"Int24\", \"BE\");\nconst $af65abf7bf65ac42$export$73f695d681ac61f9 = $af65abf7bf65ac42$export$3676d1f71eca2ec0;\nconst $af65abf7bf65ac42$export$671f8672dbd40a4 = new $af65abf7bf65ac42$export$fffa67e515d04022(\"Int24\", \"LE\");\nconst $af65abf7bf65ac42$export$78a2ac3d09dd42d5 = new $af65abf7bf65ac42$export$fffa67e515d04022(\"Int32\", \"BE\");\nconst $af65abf7bf65ac42$export$1d95835383bb05a = $af65abf7bf65ac42$export$78a2ac3d09dd42d5;\nconst $af65abf7bf65ac42$export$5ec1f146e759329a = new $af65abf7bf65ac42$export$fffa67e515d04022(\"Int32\", \"LE\");\nconst $af65abf7bf65ac42$export$92b5c14c6abb5c97 = new $af65abf7bf65ac42$export$fffa67e515d04022(\"Float\", \"BE\");\nconst $af65abf7bf65ac42$export$6b5cd3983e3ee5ab = $af65abf7bf65ac42$export$92b5c14c6abb5c97;\nconst $af65abf7bf65ac42$export$6d20592bc4cb19d9 = new $af65abf7bf65ac42$export$fffa67e515d04022(\"Float\", \"LE\");\nconst $af65abf7bf65ac42$export$e50b9e97e4d43631 = new $af65abf7bf65ac42$export$fffa67e515d04022(\"Double\", \"BE\");\nconst $af65abf7bf65ac42$export$7b3cbda67be88f5f = $af65abf7bf65ac42$export$e50b9e97e4d43631;\nconst $af65abf7bf65ac42$export$6f53315aa512b751 = new $af65abf7bf65ac42$export$fffa67e515d04022(\"Double\", \"LE\");\nclass $af65abf7bf65ac42$export$13475bbd2a37a9b4 extends $af65abf7bf65ac42$export$fffa67e515d04022 {\n    constructor(size, endian, fracBits = size >> 1){\n        super(`Int${size}`, endian);\n        this._point = 1 << fracBits;\n    }\n    decode(stream) {\n        return super.decode(stream) / this._point;\n    }\n    encode(stream, val) {\n        return super.encode(stream, val * this._point | 0);\n    }\n}\nconst $af65abf7bf65ac42$export$f87b441e6bd90278 = new $af65abf7bf65ac42$export$13475bbd2a37a9b4(16, \"BE\");\nconst $af65abf7bf65ac42$export$a3abada75ef55921 = $af65abf7bf65ac42$export$f87b441e6bd90278;\nconst $af65abf7bf65ac42$export$3752a2886837dc22 = new $af65abf7bf65ac42$export$13475bbd2a37a9b4(16, \"LE\");\nconst $af65abf7bf65ac42$export$dd71d8d9bc792632 = new $af65abf7bf65ac42$export$13475bbd2a37a9b4(32, \"BE\");\nconst $af65abf7bf65ac42$export$e913265d48471f2d = $af65abf7bf65ac42$export$dd71d8d9bc792632;\nconst $af65abf7bf65ac42$export$7fc47db6a5fc8223 = new $af65abf7bf65ac42$export$13475bbd2a37a9b4(32, \"LE\");\n\n\nvar $4559ecf940edc78d$exports = {};\n\n$parcel$export($4559ecf940edc78d$exports, \"resolveLength\", () => $4559ecf940edc78d$export$83b6dc3503c1fda6);\n$parcel$export($4559ecf940edc78d$exports, \"PropertyDescriptor\", () => $4559ecf940edc78d$export$41705b1d644e0f14);\n\nfunction $4559ecf940edc78d$export$83b6dc3503c1fda6(length, stream, parent) {\n    let res;\n    if (typeof length === \"number\") res = length;\n    else if (typeof length === \"function\") res = length.call(parent, parent);\n    else if (parent && typeof length === \"string\") res = parent[length];\n    else if (stream && length instanceof (0, $af65abf7bf65ac42$export$fffa67e515d04022)) res = length.decode(stream);\n    if (isNaN(res)) throw new Error(\"Not a fixed size\");\n    return res;\n}\nclass $4559ecf940edc78d$export$41705b1d644e0f14 {\n    constructor(opts = {}){\n        this.enumerable = true;\n        this.configurable = true;\n        for(let key in opts){\n            const val = opts[key];\n            this[key] = val;\n        }\n    }\n}\n\n\nclass $8ea28a08eae2a116$export$c4be6576ca6fe4aa extends (0, $8d21f7fa58802901$export$ef88aa0d34c34520) {\n    constructor(type, length, lengthType = \"count\"){\n        super();\n        this.type = type;\n        this.length = length;\n        this.lengthType = lengthType;\n    }\n    decode(stream, parent) {\n        let length;\n        const { pos: pos  } = stream;\n        const res = [];\n        let ctx = parent;\n        if (this.length != null) length = $4559ecf940edc78d$export$83b6dc3503c1fda6(this.length, stream, parent);\n        if (this.length instanceof (0, $af65abf7bf65ac42$export$fffa67e515d04022)) {\n            // define hidden properties\n            Object.defineProperties(res, {\n                parent: {\n                    value: parent\n                },\n                _startOffset: {\n                    value: pos\n                },\n                _currentOffset: {\n                    value: 0,\n                    writable: true\n                },\n                _length: {\n                    value: length\n                }\n            });\n            ctx = res;\n        }\n        if (length == null || this.lengthType === \"bytes\") {\n            const target = length != null ? stream.pos + length : (parent != null ? parent._length : undefined) ? parent._startOffset + parent._length : stream.length;\n            while(stream.pos < target)res.push(this.type.decode(stream, ctx));\n        } else for(let i = 0, end = length; i < end; i++)res.push(this.type.decode(stream, ctx));\n        return res;\n    }\n    size(array, ctx, includePointers = true) {\n        if (!array) return this.type.size(null, ctx) * $4559ecf940edc78d$export$83b6dc3503c1fda6(this.length, null, ctx);\n        let size = 0;\n        if (this.length instanceof (0, $af65abf7bf65ac42$export$fffa67e515d04022)) {\n            size += this.length.size();\n            ctx = {\n                parent: ctx,\n                pointerSize: 0\n            };\n        }\n        for (let item of array)size += this.type.size(item, ctx);\n        if (ctx && includePointers && this.length instanceof (0, $af65abf7bf65ac42$export$fffa67e515d04022)) size += ctx.pointerSize;\n        return size;\n    }\n    encode(stream, array, parent) {\n        let ctx = parent;\n        if (this.length instanceof (0, $af65abf7bf65ac42$export$fffa67e515d04022)) {\n            ctx = {\n                pointers: [],\n                startOffset: stream.pos,\n                parent: parent\n            };\n            ctx.pointerOffset = stream.pos + this.size(array, ctx, false);\n            this.length.encode(stream, array.length);\n        }\n        for (let item of array)this.type.encode(stream, item, ctx);\n        if (this.length instanceof (0, $af65abf7bf65ac42$export$fffa67e515d04022)) {\n            let i = 0;\n            while(i < ctx.pointers.length){\n                const ptr = ctx.pointers[i++];\n                ptr.type.encode(stream, ptr.val, ptr.parent);\n            }\n        }\n    }\n}\n\n\n\n\n\nclass $444f112d3cbc7e9f$export$5576c026028d4983 extends (0, $8ea28a08eae2a116$export$c4be6576ca6fe4aa) {\n    decode(stream, parent) {\n        const { pos: pos  } = stream;\n        const length = $4559ecf940edc78d$export$83b6dc3503c1fda6(this.length, stream, parent);\n        if (this.length instanceof (0, $af65abf7bf65ac42$export$fffa67e515d04022)) parent = {\n            parent: parent,\n            _startOffset: pos,\n            _currentOffset: 0,\n            _length: length\n        };\n        const res = new $444f112d3cbc7e9f$var$LazyArrayValue(this.type, length, stream, parent);\n        stream.pos += length * this.type.size(null, parent);\n        return res;\n    }\n    size(val, ctx) {\n        if (val instanceof $444f112d3cbc7e9f$var$LazyArrayValue) val = val.toArray();\n        return super.size(val, ctx);\n    }\n    encode(stream, val, ctx) {\n        if (val instanceof $444f112d3cbc7e9f$var$LazyArrayValue) val = val.toArray();\n        return super.encode(stream, val, ctx);\n    }\n}\nclass $444f112d3cbc7e9f$var$LazyArrayValue {\n    constructor(type, length, stream, ctx){\n        this.type = type;\n        this.length = length;\n        this.stream = stream;\n        this.ctx = ctx;\n        this.base = this.stream.pos;\n        this.items = [];\n    }\n    get(index) {\n        if (index < 0 || index >= this.length) return undefined;\n        if (this.items[index] == null) {\n            const { pos: pos  } = this.stream;\n            this.stream.pos = this.base + this.type.size(null, this.ctx) * index;\n            this.items[index] = this.type.decode(this.stream, this.ctx);\n            this.stream.pos = pos;\n        }\n        return this.items[index];\n    }\n    toArray() {\n        const result = [];\n        for(let i = 0, end = this.length; i < end; i++)result.push(this.get(i));\n        return result;\n    }\n}\n\n\n\nclass $3def237a34a226b5$export$96b43b8a49f688ea extends (0, $8d21f7fa58802901$export$ef88aa0d34c34520) {\n    constructor(type, flags = []){\n        super();\n        this.type = type;\n        this.flags = flags;\n    }\n    decode(stream) {\n        const val = this.type.decode(stream);\n        const res = {};\n        for(let i = 0; i < this.flags.length; i++){\n            const flag = this.flags[i];\n            if (flag != null) res[flag] = !!(val & 1 << i);\n        }\n        return res;\n    }\n    size() {\n        return this.type.size();\n    }\n    encode(stream, keys) {\n        let val = 0;\n        for(let i = 0; i < this.flags.length; i++){\n            const flag = this.flags[i];\n            if (flag != null) {\n                if (keys[flag]) val |= 1 << i;\n            }\n        }\n        return this.type.encode(stream, val);\n    }\n}\n\n\n\nclass $8415e91bb83faf74$export$ff887cefee4d61ec extends (0, $8d21f7fa58802901$export$ef88aa0d34c34520) {\n    constructor(type){\n        super();\n        this.type = type;\n    }\n    decode(stream, parent) {\n        return !!this.type.decode(stream, parent);\n    }\n    size(val, parent) {\n        return this.type.size(val, parent);\n    }\n    encode(stream, val, parent) {\n        return this.type.encode(stream, +val, parent);\n    }\n}\n\n\n\n\n\nclass $08d28604119af47e$export$7d22a0eea6656474 extends (0, $8d21f7fa58802901$export$ef88aa0d34c34520) {\n    constructor(length){\n        super();\n        this.length = length;\n    }\n    decode(stream, parent) {\n        const length = $4559ecf940edc78d$export$83b6dc3503c1fda6(this.length, stream, parent);\n        return stream.readBuffer(length);\n    }\n    size(val, parent) {\n        if (!val) return $4559ecf940edc78d$export$83b6dc3503c1fda6(this.length, null, parent);\n        let len = val.length;\n        if (this.length instanceof (0, $af65abf7bf65ac42$export$fffa67e515d04022)) len += this.length.size();\n        return len;\n    }\n    encode(stream, buf, parent) {\n        if (this.length instanceof (0, $af65abf7bf65ac42$export$fffa67e515d04022)) this.length.encode(stream, buf.length);\n        return stream.writeBuffer(buf);\n    }\n}\n\n\n\nclass $070ce31ea947467f$export$deb82508dd66d288 extends (0, $8d21f7fa58802901$export$ef88aa0d34c34520) {\n    constructor(type, options = []){\n        super();\n        this.type = type;\n        this.options = options;\n    }\n    decode(stream) {\n        const index = this.type.decode(stream);\n        return this.options[index] || index;\n    }\n    size() {\n        return this.type.size();\n    }\n    encode(stream, val) {\n        const index = this.options.indexOf(val);\n        if (index === -1) throw new Error(`Unknown option in enum: ${val}`);\n        return this.type.encode(stream, index);\n    }\n}\n\n\n\nclass $80703542fcfb6ff0$export$7acb7b24c478f9c6 extends (0, $8d21f7fa58802901$export$ef88aa0d34c34520) {\n    constructor(type, condition = true){\n        super();\n        this.type = type;\n        this.condition = condition;\n    }\n    decode(stream, parent) {\n        let { condition: condition  } = this;\n        if (typeof condition === \"function\") condition = condition.call(parent, parent);\n        if (condition) return this.type.decode(stream, parent);\n    }\n    size(val, parent) {\n        let { condition: condition  } = this;\n        if (typeof condition === \"function\") condition = condition.call(parent, parent);\n        if (condition) return this.type.size(val, parent);\n        else return 0;\n    }\n    encode(stream, val, parent) {\n        let { condition: condition  } = this;\n        if (typeof condition === \"function\") condition = condition.call(parent, parent);\n        if (condition) return this.type.encode(stream, val, parent);\n    }\n}\n\n\n\n\nclass $f4fd49878232508a$export$da9b5fe187a9aa1 extends (0, $8d21f7fa58802901$export$ef88aa0d34c34520) {\n    constructor(type, count = 1){\n        super();\n        this.type = type;\n        this.count = count;\n    }\n    decode(stream, parent) {\n        stream.pos += this.size(null, parent);\n        return undefined;\n    }\n    size(data, parent) {\n        const count = $4559ecf940edc78d$export$83b6dc3503c1fda6(this.count, null, parent);\n        return this.type.size() * count;\n    }\n    encode(stream, val, parent) {\n        return stream.fill(0, this.size(val, parent));\n    }\n}\n\n\n\n\n\nclass $d8705cd4022e7dcf$export$89b8e0fa65f6a914 extends (0, $8d21f7fa58802901$export$ef88aa0d34c34520) {\n    constructor(length, encoding = \"ascii\"){\n        super();\n        this.length = length;\n        this.encoding = encoding;\n    }\n    decode(stream, parent) {\n        let length, pos;\n        if (this.length != null) length = $4559ecf940edc78d$export$83b6dc3503c1fda6(this.length, stream, parent);\n        else {\n            let buffer;\n            ({ buffer: buffer , length: length , pos: pos  } = stream);\n            while(pos < length && buffer[pos] !== 0x00)++pos;\n            length = pos - stream.pos;\n        }\n        let { encoding: encoding  } = this;\n        if (typeof encoding === \"function\") encoding = encoding.call(parent, parent) || \"ascii\";\n        const string = stream.readString(length, encoding);\n        if (this.length == null && stream.pos < stream.length) stream.pos++;\n        return string;\n    }\n    size(val, parent) {\n        // Use the defined value if no value was given\n        if (!val) return $4559ecf940edc78d$export$83b6dc3503c1fda6(this.length, null, parent);\n        let { encoding: encoding  } = this;\n        if (typeof encoding === \"function\") encoding = encoding.call(parent != null ? parent.val : undefined, parent != null ? parent.val : undefined) || \"ascii\";\n        if (encoding === \"utf16be\") encoding = \"utf16le\";\n        let size = $d8705cd4022e7dcf$var$byteLength(val, encoding);\n        if (this.length instanceof (0, $af65abf7bf65ac42$export$fffa67e515d04022)) size += this.length.size();\n        if (this.length == null) size++;\n        return size;\n    }\n    encode(stream, val, parent) {\n        let { encoding: encoding  } = this;\n        if (typeof encoding === \"function\") encoding = encoding.call(parent != null ? parent.val : undefined, parent != null ? parent.val : undefined) || \"ascii\";\n        if (this.length instanceof (0, $af65abf7bf65ac42$export$fffa67e515d04022)) this.length.encode(stream, $d8705cd4022e7dcf$var$byteLength(val, encoding));\n        stream.writeString(val, encoding);\n        if (this.length == null) return stream.writeUInt8(0x00);\n    }\n}\nfunction $d8705cd4022e7dcf$var$byteLength(string, encoding) {\n    switch(encoding){\n        case \"ascii\":\n            return string.length;\n        case \"utf8\":\n            let len = 0;\n            for(let i = 0; i < string.length; i++){\n                let c = string.charCodeAt(i);\n                if (c >= 0xd800 && c <= 0xdbff && i < string.length - 1) {\n                    let c2 = string.charCodeAt(++i);\n                    if ((c2 & 0xfc00) === 0xdc00) c = ((c & 0x3ff) << 10) + (c2 & 0x3ff) + 0x10000;\n                    else // unmatched surrogate.\n                    i--;\n                }\n                if ((c & 0xffffff80) === 0) len++;\n                else if ((c & 0xfffff800) === 0) len += 2;\n                else if ((c & 0xffff0000) === 0) len += 3;\n                else if ((c & 0xffe00000) === 0) len += 4;\n            }\n            return len;\n        case \"utf16le\":\n        case \"utf16-le\":\n        case \"utf16be\":\n        case \"utf16-be\":\n        case \"ucs2\":\n            return string.length * 2;\n        default:\n            throw new Error(\"Unknown encoding \" + encoding);\n    }\n}\n\n\n\n\nclass $aa8b66bae6abe658$export$eabc71f011df675a extends (0, $8d21f7fa58802901$export$ef88aa0d34c34520) {\n    constructor(fields = {}){\n        super();\n        this.fields = fields;\n    }\n    decode(stream, parent, length = 0) {\n        const res = this._setup(stream, parent, length);\n        this._parseFields(stream, res, this.fields);\n        if (this.process != null) this.process.call(res, stream);\n        return res;\n    }\n    _setup(stream, parent, length) {\n        const res = {};\n        // define hidden properties\n        Object.defineProperties(res, {\n            parent: {\n                value: parent\n            },\n            _startOffset: {\n                value: stream.pos\n            },\n            _currentOffset: {\n                value: 0,\n                writable: true\n            },\n            _length: {\n                value: length\n            }\n        });\n        return res;\n    }\n    _parseFields(stream, res, fields) {\n        for(let key in fields){\n            var val;\n            const type = fields[key];\n            if (typeof type === \"function\") val = type.call(res, res);\n            else val = type.decode(stream, res);\n            if (val !== undefined) {\n                if (val instanceof $4559ecf940edc78d$export$41705b1d644e0f14) Object.defineProperty(res, key, val);\n                else res[key] = val;\n            }\n            res._currentOffset = stream.pos - res._startOffset;\n        }\n    }\n    size(val, parent, includePointers = true) {\n        if (val == null) val = {};\n        const ctx = {\n            parent: parent,\n            val: val,\n            pointerSize: 0\n        };\n        if (this.preEncode != null) this.preEncode.call(val);\n        let size = 0;\n        for(let key in this.fields){\n            const type = this.fields[key];\n            if (type.size != null) size += type.size(val[key], ctx);\n        }\n        if (includePointers) size += ctx.pointerSize;\n        return size;\n    }\n    encode(stream, val, parent) {\n        let type;\n        if (this.preEncode != null) this.preEncode.call(val, stream);\n        const ctx = {\n            pointers: [],\n            startOffset: stream.pos,\n            parent: parent,\n            val: val,\n            pointerSize: 0\n        };\n        ctx.pointerOffset = stream.pos + this.size(val, ctx, false);\n        for(let key in this.fields){\n            type = this.fields[key];\n            if (type.encode != null) type.encode(stream, val[key], ctx);\n        }\n        let i = 0;\n        while(i < ctx.pointers.length){\n            const ptr = ctx.pointers[i++];\n            ptr.type.encode(stream, ptr.val, ptr.parent);\n        }\n    }\n}\n\n\n\nconst $fcb208a95f6d048b$var$getPath = (object, pathArray)=>{\n    return pathArray.reduce((prevObj, key)=>prevObj && prevObj[key], object);\n};\nclass $fcb208a95f6d048b$export$95a8b60f4da7dec8 extends (0, $aa8b66bae6abe658$export$eabc71f011df675a) {\n    constructor(type, versions = {}){\n        super();\n        this.type = type;\n        this.versions = versions;\n        if (typeof type === \"string\") this.versionPath = type.split(\".\");\n    }\n    decode(stream, parent, length = 0) {\n        const res = this._setup(stream, parent, length);\n        if (typeof this.type === \"string\") res.version = $fcb208a95f6d048b$var$getPath(parent, this.versionPath);\n        else res.version = this.type.decode(stream);\n        if (this.versions.header) this._parseFields(stream, res, this.versions.header);\n        const fields = this.versions[res.version];\n        if (fields == null) throw new Error(`Unknown version ${res.version}`);\n        if (fields instanceof $fcb208a95f6d048b$export$95a8b60f4da7dec8) return fields.decode(stream, parent);\n        this._parseFields(stream, res, fields);\n        if (this.process != null) this.process.call(res, stream);\n        return res;\n    }\n    size(val, parent, includePointers = true) {\n        let key, type;\n        if (!val) throw new Error(\"Not a fixed size\");\n        if (this.preEncode != null) this.preEncode.call(val);\n        const ctx = {\n            parent: parent,\n            val: val,\n            pointerSize: 0\n        };\n        let size = 0;\n        if (typeof this.type !== \"string\") size += this.type.size(val.version, ctx);\n        if (this.versions.header) for(key in this.versions.header){\n            type = this.versions.header[key];\n            if (type.size != null) size += type.size(val[key], ctx);\n        }\n        const fields = this.versions[val.version];\n        if (fields == null) throw new Error(`Unknown version ${val.version}`);\n        for(key in fields){\n            type = fields[key];\n            if (type.size != null) size += type.size(val[key], ctx);\n        }\n        if (includePointers) size += ctx.pointerSize;\n        return size;\n    }\n    encode(stream, val, parent) {\n        let key, type;\n        if (this.preEncode != null) this.preEncode.call(val, stream);\n        const ctx = {\n            pointers: [],\n            startOffset: stream.pos,\n            parent: parent,\n            val: val,\n            pointerSize: 0\n        };\n        ctx.pointerOffset = stream.pos + this.size(val, ctx, false);\n        if (typeof this.type !== \"string\") this.type.encode(stream, val.version);\n        if (this.versions.header) for(key in this.versions.header){\n            type = this.versions.header[key];\n            if (type.encode != null) type.encode(stream, val[key], ctx);\n        }\n        const fields = this.versions[val.version];\n        for(key in fields){\n            type = fields[key];\n            if (type.encode != null) type.encode(stream, val[key], ctx);\n        }\n        let i = 0;\n        while(i < ctx.pointers.length){\n            const ptr = ctx.pointers[i++];\n            ptr.type.encode(stream, ptr.val, ptr.parent);\n        }\n    }\n}\n\n\n\n\nvar $92184962f8f0d5e2$exports = {};\n\n$parcel$export($92184962f8f0d5e2$exports, \"Pointer\", () => $92184962f8f0d5e2$export$b56007f12edf0c17);\n$parcel$export($92184962f8f0d5e2$exports, \"VoidPointer\", () => $92184962f8f0d5e2$export$df5cb1f3d04f5a0f);\n\n\nclass $92184962f8f0d5e2$export$b56007f12edf0c17 extends (0, $8d21f7fa58802901$export$ef88aa0d34c34520) {\n    constructor(offsetType, type, options = {}){\n        super();\n        this.offsetType = offsetType;\n        this.type = type;\n        this.options = options;\n        if (this.type === \"void\") this.type = null;\n        if (this.options.type == null) this.options.type = \"local\";\n        if (this.options.allowNull == null) this.options.allowNull = true;\n        if (this.options.nullValue == null) this.options.nullValue = 0;\n        if (this.options.lazy == null) this.options.lazy = false;\n        if (this.options.relativeTo) {\n            if (typeof this.options.relativeTo !== \"function\") throw new Error(\"relativeTo option must be a function\");\n            this.relativeToGetter = options.relativeTo;\n        }\n    }\n    decode(stream, ctx) {\n        const offset = this.offsetType.decode(stream, ctx);\n        // handle NULL pointers\n        if (offset === this.options.nullValue && this.options.allowNull) return null;\n        let relative;\n        switch(this.options.type){\n            case \"local\":\n                relative = ctx._startOffset;\n                break;\n            case \"immediate\":\n                relative = stream.pos - this.offsetType.size();\n                break;\n            case \"parent\":\n                relative = ctx.parent._startOffset;\n                break;\n            default:\n                var c = ctx;\n                while(c.parent)c = c.parent;\n                relative = c._startOffset || 0;\n        }\n        if (this.options.relativeTo) relative += this.relativeToGetter(ctx);\n        const ptr = offset + relative;\n        if (this.type != null) {\n            let val = null;\n            const decodeValue = ()=>{\n                if (val != null) return val;\n                const { pos: pos  } = stream;\n                stream.pos = ptr;\n                val = this.type.decode(stream, ctx);\n                stream.pos = pos;\n                return val;\n            };\n            // If this is a lazy pointer, define a getter to decode only when needed.\n            // This obviously only works when the pointer is contained by a Struct.\n            if (this.options.lazy) return new $4559ecf940edc78d$export$41705b1d644e0f14({\n                get: decodeValue\n            });\n            return decodeValue();\n        } else return ptr;\n    }\n    size(val, ctx) {\n        const parent = ctx;\n        switch(this.options.type){\n            case \"local\":\n            case \"immediate\":\n                break;\n            case \"parent\":\n                ctx = ctx.parent;\n                break;\n            default:\n                while(ctx.parent)ctx = ctx.parent;\n        }\n        let { type: type  } = this;\n        if (type == null) {\n            if (!(val instanceof $92184962f8f0d5e2$export$df5cb1f3d04f5a0f)) throw new Error(\"Must be a VoidPointer\");\n            ({ type: type  } = val);\n            val = val.value;\n        }\n        if (val && ctx) {\n            // Must be written as two separate lines rather than += in case `type.size` mutates ctx.pointerSize.\n            let size = type.size(val, parent);\n            ctx.pointerSize += size;\n        }\n        return this.offsetType.size();\n    }\n    encode(stream, val, ctx) {\n        let relative;\n        const parent = ctx;\n        if (val == null) {\n            this.offsetType.encode(stream, this.options.nullValue);\n            return;\n        }\n        switch(this.options.type){\n            case \"local\":\n                relative = ctx.startOffset;\n                break;\n            case \"immediate\":\n                relative = stream.pos + this.offsetType.size(val, parent);\n                break;\n            case \"parent\":\n                ctx = ctx.parent;\n                relative = ctx.startOffset;\n                break;\n            default:\n                relative = 0;\n                while(ctx.parent)ctx = ctx.parent;\n        }\n        if (this.options.relativeTo) relative += this.relativeToGetter(parent.val);\n        this.offsetType.encode(stream, ctx.pointerOffset - relative);\n        let { type: type  } = this;\n        if (type == null) {\n            if (!(val instanceof $92184962f8f0d5e2$export$df5cb1f3d04f5a0f)) throw new Error(\"Must be a VoidPointer\");\n            ({ type: type  } = val);\n            val = val.value;\n        }\n        ctx.pointers.push({\n            type: type,\n            val: val,\n            parent: parent\n        });\n        return ctx.pointerOffset += type.size(val, parent);\n    }\n}\nclass $92184962f8f0d5e2$export$df5cb1f3d04f5a0f {\n    constructor(type, value){\n        this.type = type;\n        this.value = value;\n    }\n}\n\n\n$parcel$exportWildcard(module.exports, $4559ecf940edc78d$exports);\n$parcel$exportWildcard(module.exports, $af65abf7bf65ac42$exports);\n$parcel$exportWildcard(module.exports, $92184962f8f0d5e2$exports);\n\n\n//# sourceMappingURL=main.cjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/restructure/dist/main.cjs\n");

/***/ })

};
;